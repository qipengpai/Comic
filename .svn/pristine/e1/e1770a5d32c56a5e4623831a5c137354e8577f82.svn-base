package com.qin.crxl.comic.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.qin.crxl.comic.base.BaseServiceImpl;
import com.qin.crxl.comic.entity.Cartoon;
import com.qin.crxl.comic.entity.vo.CartoonVo;
import com.qin.crxl.comic.service.AdminCartoonService;
import com.qin.crxl.comic.tool.DateUtil;
import com.qin.crxl.comic.tool.ParaClick;

@Service
public class AdminCartoonServiceImpl extends BaseServiceImpl<Cartoon> implements
		AdminCartoonService {
	
	@Override
	public String addAdminCartoon(CartoonVo cartoonData) {
		try {
			Cartoon cartoon = new Cartoon();
			// cartoon.setCartoonType(cartoonData.getCartoonType());//类型
			cartoon.setFirstType(cartoonData.getFirsrtType());// 一级类型
			cartoon.setCartoonName(cartoonData.getCartoonName());// 剧名
			cartoon.setUpdateTile(cartoonData.getUpdateTile());// 更新标题
			cartoon.setCartoonAuthor(cartoonData.getCartoonAuthor());// 作者
			cartoon.setUpdateType(cartoonData.getUpdateType());// 更新类型
			cartoon.setMainPhoto(cartoonData.getMainPhoto());// 首页主图
			cartoon.setIntroduction(cartoonData.getIntroduction());// 介绍图
			cartoon.setMidelPhoto(cartoonData.getMainPhoto());// 中图
			cartoon.setSmallPhoto(cartoonData.getSmallPhoto());// 小图
			cartoon.setIntroduc(cartoonData.getIntroduc());// 短介绍
			cartoon.setHot(0);//热度
			cartoon.setState(0);// 上架状态
			String time = DateUtil.getdate();
			//更新时间
			cartoon.setUpdateDate(time);
			// 操作时间
			cartoon.setImplDate(time);
			// sort排序加1（自增）
			cartoon.setSort(this.getSortMax() + 1);
			super.save(cartoon);
			return cartoon.getId();
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public int getSortMax() {
		StringBuffer sb = new StringBuffer();
		sb.append("select max(sort) from Cartoon");
		List<Integer> lists = getSessionFactory().createSQLQuery(sb.toString())
				.list();
		if (lists != null && lists.size() > 0) {
			Integer obj = lists.get(0);
			if (obj == null) {
				return 0;
			}

			return lists.get(0);
		}
		return 0;
	}

	//删除漫画
	@Override
	public boolean deleteAdminCartoon(String id) {
		try {
			Cartoon cartoon = super.get(id);
			if (ParaClick.clickObj(cartoon)) {
				//删除漫画的内容和漫画类型
				SQL("DELETE FROM Cartoon,CartoonAllType USING Cartoon,CartoonAllType WHERE Cartoon.id='"+id+"' CartoonAllType.cartoonId='"+id+"'");
				//删除漫画话的图片
				SQL("delete from CartoonPhoto where cartoonId='"+id+"'");
				//删除漫画的话cartoonSet
				SQL("delete from CartoonSet where cartoonId='"+id+"'");
				return true;
			} else {
				return false;
			}
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean updateAdminCartoon(CartoonVo cartoonVo) {
		Cartoon cartoon = null;
		try {
			cartoon = super.get(cartoonVo.getId());
			if (ParaClick.clickObj(cartoon)) {

				if (!ParaClick.clickString(cartoonVo.getFirsrtType())) {
					cartoon.setFirstType(cartoonVo.getFirsrtType());
				}
				if (!ParaClick.clickString(cartoonVo.getCartoonName())) {
					cartoon.setCartoonName(cartoonVo.getCartoonName());
				}
				if (!ParaClick.clickString(cartoonVo.getUpdateTile())) {
					cartoon.setUpdateTile(cartoonVo.getUpdateTile());
				}
				if (!ParaClick.clickString(cartoonVo.getCartoonAuthor())) {
					cartoon.setCartoonAuthor(cartoonVo.getCartoonAuthor());
				}
				if (!ParaClick.clickString(cartoonVo.getUpdateType())) {
					cartoon.setUpdateType(cartoonVo.getUpdateType());
				}
				if (!ParaClick.clickString(cartoonVo.getMainPhoto())) {
					cartoon.setMainPhoto(cartoonVo.getMainPhoto());
				}
				if (!ParaClick.clickString(cartoonVo.getIntroduction())) {
					cartoon.setIntroduction(cartoonVo.getIntroduction());
				}
				if (!ParaClick.clickString(cartoonVo.getMidelPhoto())) {
					cartoon.setMidelPhoto(cartoonVo.getMidelPhoto());
				}
				if (!ParaClick.clickString(cartoonVo.getSmallPhoto())) {
					cartoon.setSmallPhoto(cartoonVo.getSmallPhoto());
				}
				if (!ParaClick.clickString(cartoonVo.getIntroduc())) {
					cartoon.setIntroduc(cartoonVo.getIntroduc());
				}
				// 热度
				if (!ParaClick.clickString(cartoonVo.getHot())) {
					cartoon.setHot(Integer.parseInt(cartoonVo.getHot()));
				}
				// 上架状态
				if (!ParaClick.clickString(cartoonVo.getState())) {
					cartoon.setState(Integer.parseInt(cartoonVo.getState()));
				}
				cartoon.setUpdateDate(DateUtil.getdate());
				return true;
			}
			return false;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public Cartoon selectByIdCartoon(String id) {
		Cartoon cartoon = super.get(id);
		return cartoon;
	}

	@Override
	public List<Cartoon> selectAllCartoon(CartoonVo cartoonData) {
		StringBuffer sb = new StringBuffer();
		sb.append("select c.* from Cartoon c where 1=1");
		if (!ParaClick.clickString(cartoonData.getFirsrtType())) {
			sb.append(" AND c.firstType=" + cartoonData.getFirsrtType());
		}
		if(!ParaClick.clickString(cartoonData.getCartoonAuthor())){
			sb.append(" AND c.cartoonAuthor like '%" + cartoonData.getCartoonAuthor().trim()+"%'))");
		}
		if (!ParaClick.clickString(cartoonData.getCondition())) {
			sb.append(" AND ((c.cartoonName LIKE '%"
					+ cartoonData.getCondition().trim()
					+ "%') OR (c.cartoonAuthor LIKE '%"
					+ cartoonData.getCondition().trim() + "%'))");
		}
		sb.append(" order by c.state DESC,c.hot DESC,c.updateDate DESC,c.sort DESC LIMIT "
				+ (Integer.parseInt(cartoonData.getNowPage()) - 1) * Integer.parseInt(cartoonData.getPageNum()) + ","
				+ Integer.parseInt(cartoonData.getPageNum()));
		List<Cartoon> cartoonList = SQL(sb.toString(), Cartoon.class);
		return cartoonList;
	}

	@Override
	public int getCount(CartoonVo cartoonData) {
		StringBuffer sb = new StringBuffer();
		sb.append("select count(*) from Cartoon c where 1=1");
		if (!ParaClick.clickString(cartoonData.getFirsrtType())) {
			sb.append(" AND c.firstType=" + cartoonData.getFirsrtType());
		}
		if(!ParaClick.clickString(cartoonData.getCartoonAuthor())){
			sb.append(" AND c.cartoonAuthor like '%" + cartoonData.getCartoonAuthor().trim()+"%'))");
		}
		if (!ParaClick.clickString(cartoonData.getCondition())) {
			sb.append(" AND ((c.cartoonName LIKE '%"
					+ cartoonData.getCondition().trim()
					+ "%') OR (c.cartoonAuthor LIKE '%"
					+ cartoonData.getCondition().trim() + "%'))");
		}
		int totalPage = super.gettotalpage(sb.toString());
		return totalPage;
	}

}
