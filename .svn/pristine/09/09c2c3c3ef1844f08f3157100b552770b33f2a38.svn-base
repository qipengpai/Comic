package com.qin.crxl.comic.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.qin.crxl.comic.base.BaseServiceImpl;
import com.qin.crxl.comic.entity.Cartoon;
import com.qin.crxl.comic.entity.vo.CartoonVo;
import com.qin.crxl.comic.service.AdminCartoonService;
import com.qin.crxl.comic.tool.DateUtil;
import com.qin.crxl.comic.tool.ParaClick;
@Service
public class AdminCartoonServiceImpl extends BaseServiceImpl<Cartoon> implements AdminCartoonService {

	@Override
	public boolean addAdminCartoon(CartoonVo cartoonData) {
		try{
			Cartoon cartoon =new Cartoon();
			cartoon.setCartoonType(cartoonData.getCartoonType());//类型
			cartoon.setFirstType(cartoonData.getFirsrtType());//一级类型
			cartoon.setCartoonName(cartoonData.getCartoonName());//剧名
			cartoon.setUpdateTile(cartoonData.getUpdateTile());//更新标题
			cartoon.setCartoonAuthor(cartoonData.getCartoonAuthor());//作者
			cartoon.setUpdateType(cartoonData.getUpdateType());//更新类型
			cartoon.setMainPhoto(cartoonData.getMainPhoto());//首页主图
			cartoon.setIntroduction(cartoonData.getIntroduction());//介绍图
			cartoon.setMidelPhoto(cartoonData.getMainPhoto());//中图   
			cartoon.setSmallPhoto(cartoonData.getSmallPhoto());//小图
			cartoon.setIntroduc(cartoonData.getIntroduc());//短介绍
			cartoon.setState(Integer.parseInt(cartoonData.getState()));//上架状态
			cartoon.setImplDate(DateUtil.getdate());//操作时间
			//sort排序加1（自增）
			cartoon.setSort(this.getSortMax()+1);
			
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		return true;
	}

	@Override
	public int getSortMax() {
		StringBuffer sb=new StringBuffer();
		sb.append("select max(sort) from Cartoon");
		List<Object[]> lists=getSessionFactory().createSQLQuery(sb.toString()).list();
		if(lists!=null&&lists.size()>0){
			Object[] obj=lists.get(0);
			return (int)obj[0];
		}
		return 0;
	}
	
	@Override
	public boolean deleteAdminCartoon(String id) {
		try {
			Cartoon cartoon = super.get(id);
			if(ParaClick.clickObj(cartoon)){
				super.delete(id);
				return true;
			}else{
				return false;
			}
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public boolean updateAdminCartoon(CartoonVo cartoonVo) {
		Cartoon cartoon=null;
		try {
			cartoon=super.get(cartoonVo.getId());
			if(ParaClick.clickObj(cartoon)){
				if(!ParaClick.clickString(cartoonVo.getCartoonType())){
					cartoon.setCartoonType(cartoonVo.getCartoonType());
				}
				if(!ParaClick.clickString(cartoonVo.getFirsrtType())){
					cartoon.setFirstType(cartoonVo.getFirsrtType());
				}
				if(!ParaClick.clickString(cartoonVo.getCartoonName())){
					cartoon.setCartoonName(cartoonVo.getCartoonName());
				}
				if(!ParaClick.clickString(cartoonVo.getUpdateTile())){
					cartoon.setUpdateTile(cartoonVo.getUpdateTile());
				}
				if(!ParaClick.clickString(cartoonVo.getCartoonAuthor())){
					cartoon.setCartoonAuthor(cartoonVo.getCartoonAuthor());
				}
				if(!ParaClick.clickString(cartoonVo.getUpdateType())){
					cartoon.setUpdateType(cartoonVo.getUpdateType());
				}
				if(!ParaClick.clickString(cartoonVo.getMainPhoto())){
					cartoon.setMainPhoto(cartoonVo.getMainPhoto());
				}
				if(!ParaClick.clickString(cartoonVo.getIntroduction())){
					cartoon.setIntroduction(cartoonVo.getIntroduction());
				}
				if(!ParaClick.clickString(cartoonVo.getMidelPhoto())){
					cartoon.setMidelPhoto(cartoonVo.getMidelPhoto());
				}
				if(!ParaClick.clickString(cartoonVo.getSmallPhoto())){
					cartoon.setSmallPhoto(cartoonVo.getSmallPhoto());
				}
				if(!ParaClick.clickString(cartoonVo.getIntroduc())){
					cartoon.setIntroduc(cartoonVo.getIntroduc());
				}
				//热度
				if(!ParaClick.clickString(cartoonVo.getHot())){
					cartoon.setHot(Integer.parseInt(cartoonVo.getHot()));
				}
				//上架状态
				if(!ParaClick.clickString(cartoonVo.getState())){
					cartoon.setState(Integer.parseInt(cartoonVo.getState()));
				}
				return true;
			}
			return false;
		} catch (Exception e) {
			return false;
		}
	}

	@Override
	public Cartoon selectByIdCartoon(String id) {
		Cartoon cartoon = super.get(id);
		return cartoon;
	}

	@Override
	public List<Cartoon> selectAllCartoon(CartoonVo cartoonData) {
		StringBuffer sb= new StringBuffer();
		sb.append("select c.* from Cartoon c where 1=1");
		if(!ParaClick.clickString(cartoonData.getFirsrtType())){
			sb.append(" AND c.firstType="+cartoonData.getFirsrtType());
		}
		if(!ParaClick.clickString(cartoonData.getCartoonType())){
			sb.append(" AND c.cartoonType="+cartoonData.getCartoonType());
		}
		if(!ParaClick.clickString(cartoonData.getCondition())){
			sb.append(" AND ((c.cartoonName LIKE '%"
					+ cartoonData.getCondition().trim() + "%') OR (a.orderPhpne LIKE '%"
					+ cartoonData.getCondition().trim()
					+ "%') OR (c.cartoonAuthor LIKE '%"
					+ cartoonData.getCondition().trim()
					+ "%'))");
			
		}
		sb.append(" order by c.state DESC,c.hot DESC,c.sort DESC LIMIT "+(Integer.parseInt(cartoonData.getNowPage())-1)*10+","+Integer.parseInt(cartoonData.getPageNum()));
		List<Cartoon> cartoonList = SQL(sb.toString(), Cartoon.class);
		return cartoonList;
	}

	@Override
	public int getCount(CartoonVo cartoonData) {
		StringBuffer sb= new StringBuffer();
		sb.append("select count(*) from Cartoon c where 1=1");
		if(!ParaClick.clickString(cartoonData.getFirsrtType())){
			sb.append(" AND c.firstType="+cartoonData.getFirsrtType());
		}
		if(!ParaClick.clickString(cartoonData.getCartoonType())){
			sb.append(" AND c.cartoonType="+cartoonData.getCartoonType());
		}
		if(!ParaClick.clickString(cartoonData.getCondition())){
			sb.append(" AND ((c.cartoonName LIKE '%"
					+ cartoonData.getCondition().trim() + "%') OR (a.orderPhpne LIKE '%"
					+ cartoonData.getCondition().trim()
					+ "%') OR (c.cartoonAuthor LIKE '%"
					+ cartoonData.getCondition().trim()
					+ "%'))");
			
		}
		int totalPage = super.gettotalpage(sb.toString());
		return totalPage;
	}

	

}
