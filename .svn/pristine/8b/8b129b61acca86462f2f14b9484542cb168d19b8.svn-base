package com.qin.crxl.comic.service.impl;

import java.util.List;

import org.hibernate.HibernateException;
import org.springframework.stereotype.Service;

import com.qin.crxl.comic.base.BaseServiceImpl;
import com.qin.crxl.comic.entity.UserOrder;
import com.qin.crxl.comic.entity.vo.UserOrderData;
import com.qin.crxl.comic.service.AdminUserOrderService;
import com.qin.crxl.comic.tool.ParaClick;
@Service
public class AdminUserOrdeServiceImpl extends BaseServiceImpl<UserOrder>
		implements AdminUserOrderService {

	@Override
	public List<String[]> selectUserOrder(UserOrderData userOrderData) {
		//多表模糊查询
		StringBuffer sb = new StringBuffer();
		sb.append("select a.id,a.orderNum,a.nickname,a.username,a.orderMoney,a.orderDescription,a.cartoonName,a.cartoonAuthor,a.updateTile,a.updateType,s.titile,a.orderDate from cartoonset s,(select o.id,o.orderNum,u.nickname,u.username,o.orderMoney,o.orderDescription,c.cartoonName,c.cartoonAuthor,c.updateTile,c.updateType,o.orderCartoonSetId,o.orderDate from UserOrder o,Cartoon c,UserEntity u where o.orderCartoonId=c.id and o.orderUserId=u.userId and o.orderState=1");
		if (!ParaClick.clickString(userOrderData.getCondition())) {
			sb.append(" and ((o.orderNum like '" + userOrderData.getCondition()
					+ "%') or (o.orderDescription like '"
					+ userOrderData.getCondition() + "'%))");
		}
		if(!ParaClick.clickString(userOrderData.getOrderDate())){
			sb.append(" and o.orderDate BETWEEN '"+userOrderData.getStarTime()+"%' and '"+userOrderData.getEndTime()+"%'");
		}
		sb.append(") a");
		if(!ParaClick.clickString(userOrderData.getOrderCartoonId())){//代表漫画名
			sb.append(" and a.cartoonName '"+userOrderData.getOrderCartoonId()+"%'");
		}
		if(!ParaClick.clickString(userOrderData.getOrderRemarks())){//代表漫画作者
			sb.append(" and a.cartoonAuthor '"+userOrderData.getOrderRemarks()+"%'");
		}
		if(!ParaClick.clickString(userOrderData.getOrderCartoonSetId())){//代表更新类型
			sb.append(" and a.updateType='"+userOrderData.getOrderCartoonSetId()+"'");
		}
		sb.append(" order by a.cartoonName DESC,a.cartoonAuthor DESC,a.updateType ASC limit "+ (Integer.parseInt(userOrderData.getNowPage())-1) * Integer.parseInt(userOrderData.getPageNum()) + ","
				+ Integer.parseInt(userOrderData.getPageNum()));
		try {
			System.out.println(sb.toString());
			List<String[]> list = getSessionFactory().createSQLQuery(sb.toString()).list();
			return list;
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public int getCountUserOrder(UserOrderData userOrderData) {
		StringBuffer sb = new StringBuffer();
		sb.append("select count(*) from cartoonset s,(select o.id,o.orderNum,u.nickname,u.username,o.orderMoney,o.orderDescription,c.cartoonName,c.cartoonAuthor,c.updateTile,c.updateType,o.orderCartoonSetId,o.orderDate from UserOrder o,Cartoon c,UserEntity u where o.orderCartoonId=c.id and o.orderUserId=u.userId and o.orderState=1 order by o.orderDate DESC");
		if (!ParaClick.clickString(userOrderData.getCondition())) {
			sb.append(" and ((o.orderNum like '" + userOrderData.getCondition()
					+ "%') or (o.orderDescription like '"
					+ userOrderData.getCondition() + "'%))");
		}
		if(!ParaClick.clickString(userOrderData.getOrderDate())){
			sb.append(" and o.orderDate BETWEEN '"+userOrderData.getStarTime()+"%' and '"+userOrderData.getEndTime()+"%'");
		}
		sb.append(") a");
		if(!ParaClick.clickString(userOrderData.getOrderCartoonId())){//代表漫画名
			sb.append(" and a.cartoonName '"+userOrderData.getOrderCartoonId()+"%'");
		}
		if(!ParaClick.clickString(userOrderData.getOrderRemarks())){//代表漫画作者
			sb.append(" and a.cartoonAuthor '"+userOrderData.getOrderRemarks()+"%'");
		}
		if(!ParaClick.clickString(userOrderData.getOrderCartoonSetId())){//代表更新类型
			sb.append(" and a.updateType='"+userOrderData.getOrderCartoonSetId()+"'");
		}
		sb.append(" order by a.cartoonName DESC,a.cartoonAuthor DESC,a.updateType ASC");
		try {
			System.out.println(sb.toString());
			int gettotalpage = super.gettotalpage(sb.toString());
			return gettotalpage;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public UserOrder selectUserOrderById(UserOrderData userOrderData) {
		UserOrder userOrder=null;
		try {
			userOrder=super.get(userOrderData.getId());
			return userOrder;
		} catch (Exception e) {
			// TODO: handle exception
		}
		
		return null;
	}

}
