package com.qin.crxl.comic.service.impl;

import java.util.List;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.qin.crxl.comic.base.BaseServiceImpl;
import com.qin.crxl.comic.entity.CartoonComment;
import com.qin.crxl.comic.entity.CartoonSetComment;
import com.qin.crxl.comic.entity.UserEntity;
import com.qin.crxl.comic.entity.vo.CartoonSetCommentData;
import com.qin.crxl.comic.exception.BusinessException;
import com.qin.crxl.comic.service.CartoonSetCommentService;
import com.qin.crxl.comic.tool.DateUtil;
import com.qin.crxl.comic.tool.StringToInt;

@Service
public class CartoonSetCommentServiceImpl extends
		BaseServiceImpl<CartoonSetComment> implements CartoonSetCommentService {

	@Override
//	@Cacheable(value="CartoonSetComment",key="#root.methodName.concat(#cartoonId).concat(#cartoonSetId)")
	public int getAllCartoonSetCommentCount(String cartoonId, String cartoonSetId) {
		// 查看该话评论人数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonSetComment WHERE  cartoonId='"
						+ cartoonId
						+ "' AND deleteCartoonSetComment=1 AND cartoonSetId='"
						+ cartoonSetId + "'");
		return num;
	}

	@Override
//	@Cacheable(value="CartoonSetComment",key="#cartoonId.concat(#cartoonSetId).concat(#bestNew).concat(#nowPage)")
	public List<CartoonSetComment> getALLCartoonSetComment(
			String cartoonId,
			String cartoonSetId, String bestNew, String nowPage) {
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT  * FROM  CartoonSetComment  WHERE  cartoonId='"
				+ cartoonId
				+ "'  AND cartoonSetId='"
				+ cartoonSetId
				+ "' AND deleteCartoonSetComment=1 ");
		if (Integer.parseInt(bestNew) == 1) {
			sb.append("ORDER BY commentDate DESC ");
		} else {
			sb.append("ORDER BY okCount DESC,commentDate ASC");
		}
		sb.append(" LIMIT "
				+ (Integer.parseInt(nowPage)-1)*10 + ",10");
		List<CartoonSetComment> list = super.SQL(sb.toString(),
				CartoonSetComment.class);
		return list;
	}
	
	public int getAllCartoonSetCommentCountByCommentId(
			CartoonSetCommentData cartoonSetCommentData) {
		// 查看该话评论人数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonSetComment  WHERE CommentId='"
						+ cartoonSetCommentData.getCommentId() + "'");
		return num;
	}

	@Override
//	@Cacheable(value="CartoonSetCommentSon",key="#root.methodName.concat(#id)")
	public int getCartoonSetComment2Count(String id) {
		// 查看该话评论的评论数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonSetComment WHERE commentId='"
						+ id
						+ "' AND deleteCartoonSetComment=1 ");
		return num;
	}


	@Override
//	@CacheEvict(value="CartoonSetComment",allEntries=true)
	public boolean addCartoonSetComment(
			CartoonSetCommentData cartoonSetCommentData, UserEntity userEntity)
			throws Exception {
		// 评论该话
		boolean flag = false;
		try {
			// int num = getAllCartoonSetCommentCount(cartoonSetCommentData);
			CartoonSetComment cartoonSetComment = new CartoonSetComment();
			cartoonSetComment.setCartoonSetId(cartoonSetCommentData
					.getCartoonSetId());
			cartoonSetComment
					.setCartoonId(cartoonSetCommentData.getCartoonId());
			cartoonSetComment.setCommentInfo(StringToInt
					.toInt(cartoonSetCommentData.getCommentInfo()));
			cartoonSetComment.setCommentId("0");
			cartoonSetComment.setCommentDate(DateUtil
					.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonSetComment.setImplDate(DateUtil
					.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonSetComment.setUserId(userEntity.getUserId());
			cartoonSetComment.setAite("0");
			cartoonSetComment.setOkCount(0);
			cartoonSetComment.setDeleteCartoonSetComment(1);
			save(cartoonSetComment);
			/*
			 * boolean flag2 =
			 * cartoonSetService.addCartoonSetCommentCount(cartoonSetCommentData
			 * ); if (!flag2) { throw new BusinessException("评论异常"); }
			 */
			flag = true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		super.SQL("UPDATE CartoonSet SET commentCount=(commentCount+1) WHERE id='"
				+ cartoonSetCommentData.getCartoonSetId() + "'");
		return flag;
	}

	@Override
//	@Cacheable(value="CartoonSetCommentSon",key="#root.methodName.concat(#id).concat(#nowPage)")
	public List<CartoonSetComment> getALLCartoonSetCommentByCommentId(String id,
			String nowPage) {
		// TODO Auto-generated method stub
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT  * FROM  CartoonSetComment  WHERE  1=1 AND deleteCartoonSetComment=1 AND commentId='"
				+ id
				+ "' ORDER BY commentDate DESC LIMIT " + (Integer.parseInt(nowPage)-1)*10 + ",10");
		List<CartoonSetComment> list = super.SQL(sb.toString(),
				CartoonSetComment.class);
		return list;
	}

	@Override
//	@CacheEvict(value="CartoonSetCommentSon",allEntries=true)
	public boolean addCartoonCommentSetConmment(
			CartoonSetCommentData cartoonSetCommentData, String userId) {
		// 评论该评论
		boolean flag = false;
		try {
			// int num =
			// getAllCartoonSetCommentCountByCommentId(cartoonSetCommentData);
			CartoonSetComment cartoonSetComment = new CartoonSetComment();
			cartoonSetComment.setCartoonSetId("0");
			cartoonSetComment.setCartoonId("0");
			cartoonSetComment.setCommentInfo(StringToInt
					.toInt(cartoonSetCommentData.getCommentInfo()));
			cartoonSetComment.setCommentId(cartoonSetCommentData.getId());
			cartoonSetComment.setCommentDate(DateUtil
					.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonSetComment.setImplDate(DateUtil
					.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonSetComment.setUserId(userId);
			cartoonSetComment.setAite("0");
			cartoonSetComment.setOkCount(0);
			// cartoonSetComment.setSort(num + 1);
			cartoonSetComment.setDeleteCartoonSetComment(1);
			save(cartoonSetComment);
			boolean flag2 = addCartoonCommentSetConmmentCount(cartoonSetCommentData.getId());
			if (!flag2) {
				throw new BusinessException("评论异常");
			}
			flag = true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		return flag;

	}

	@Override
	public boolean addCartoonCommentSetConmment(
			CartoonSetCommentData cartoonSetCommentData) {
		// 點讚该评论
		boolean flag = false;
		try {
			CartoonSetComment cartoonSetComment = super
					.get(cartoonSetCommentData.getId());
			cartoonSetComment.setOkCount(Integer.parseInt(cartoonSetCommentData
					.getOkCount()) + 1);
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	public boolean addCartoonCommentSetConmmentCount(
			String id) {
		// 增加评论次数
		boolean flag = false;
		try {
			CartoonSetComment cartoonSetComment = super
					.get(id);
			cartoonSetComment.setCommentCount(cartoonSetComment
					.getCommentCount() + 1);
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	@Override
	public boolean addVeryOkCount(String id) {
		// 增加点赞数
		boolean flag = false;
		try {
			CartoonSetComment cartoonSetComment = super.get(id);
			cartoonSetComment
					.setOkCount(cartoonSetComment.getCommentCount() + 1);
			flag = true;
		} catch (Exception e) {
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	@Override
	public boolean subductionOkCount(String id) {
		// 减少点赞数
		boolean flag = false;
		try {
			CartoonSetComment cartoonSetComment = super
					.get(id);
			cartoonSetComment.setOkCount(cartoonSetComment.getOkCount() - 1);
			flag = true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	@Override
//	@Cacheable(value="CartoonSetCommentSon",key="#root.methodName.concat(#id)")
	public List<CartoonSetComment> getCartoonSetCommentTwo(String id) {
		// 查看评论的子评论
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT  * FROM  CartoonSetComment  WHERE  1=1 AND deleteCartoonSetComment=1 AND commentId='"
				+ id + "' ORDER BY commentDate ASC LIMIT 0,2");
		List<CartoonSetComment> list = super.SQL(sb.toString(),
				CartoonSetComment.class);
		return list;
	}

}
