package com.qin.crxl.comic.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qin.crxl.comic.entity.CartoonComment;
import com.qin.crxl.comic.entity.CartoonCommentVeryOk;
import com.qin.crxl.comic.entity.FriendsCirclePhoto;
import com.qin.crxl.comic.entity.FriendsComment;
import com.qin.crxl.comic.entity.FriendsCircle;
import com.qin.crxl.comic.entity.FriendsVeryOk;
import com.qin.crxl.comic.entity.UserEntity;
import com.qin.crxl.comic.entity.vo.CartoonSetCommentData;
import com.qin.crxl.comic.entity.vo.FriendsCircleData;
import com.qin.crxl.comic.entity.vo.UserEntityData;
import com.qin.crxl.comic.entity.vo.UserEntityReq;
import com.qin.crxl.comic.qny.UploadDemo;
import com.qin.crxl.comic.service.FriendsCirclePhotoService;
import com.qin.crxl.comic.service.FriendsCommentService;
import com.qin.crxl.comic.service.FriendsCircleService;
import com.qin.crxl.comic.service.FriendsVeryOkService;
import com.qin.crxl.comic.service.UserService;
import com.qin.crxl.comic.system.ActionUrl;
import com.qin.crxl.comic.tool.DateUtils;
import com.qin.crxl.comic.tool.Model;
import com.qin.crxl.comic.tool.ParaClick;

@Controller
public class FriendCircleController {

	@Autowired
	private FriendsCircleService friendCircleService;
	@Autowired
	private UserService userService;
	@Autowired
	private FriendsCirclePhotoService friendCirclePhotoService;
	@Autowired
	private FriendsCommentService friendCommentService;
	@Autowired
	private FriendsVeryOkService friendsVeryOkService;

	/**
	 * pp
	 * 
	 * @Remarks app>混圈>发布消息
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.RELEASE_FRIENDSCIRCLE_INFO, method = RequestMethod.POST)
	public Model userPerfectInfoHeadPortrait(
			FriendsCircleData friendsCircleData)
			throws Exception {
		friendsCircleData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(friendsCircleData.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		boolean flag = friendCircleService.userUpdateHeadPortrict(
				friendsCircleData);
		if (!flag) {
			return new Model(500, "发布失败");
		}
//		String[] pp = friendsCircleData.getCondition().split("|");
//		for (int i = 0; i < pp.length; i++) {
//			boolean flag2 = friendCirclePhotoService.addFriendCirclePhoto(
//					pp[i], friendsCircleData, userEntityData);
//			if (!flag2) {
//				return new Model(500, "添加图片失败");
//			}
//		}
		return new Model(200, "发布成功");
	}

	/**
	 * pp
	 * 
	 * @Remarks app>混圈>删除该条朋友圈
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.DELETE_FRIENDSCIRCLE_INFO, method = RequestMethod.POST)
	public Model deleteUserPerfectInfoHeadPortrait(
			FriendsCircleData friendsCircleData)
			throws Exception {
		friendsCircleData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(friendsCircleData.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		boolean flag = friendCircleService.deleteFriendsCircle(
				friendsCircleData, userEntity);
		if (!flag) {
			return new Model(500, "删除失败");
		}
		return new Model(200, "删除成功");
	}

	/**
	 * pp
	 * 
	 * @Remarks app>混圈>查看广场朋友圈>最新?最熱
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.GET_ALL_FRIENDSCIRCLE_INFO, method = RequestMethod.POST)
	public Model getUserPerfectInfoHeadPortrait(
			FriendsCircleData friendsCircleData)
			throws Exception {
		friendsCircleData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(friendsCircleData.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		if (!ParaClick.clickString(friendsCircleData.getNowPage())) {
			friendsCircleData.setNowPage("1");
		}
		Model model = new Model();
		List<Object> list2 = new ArrayList<Object>();
		int num = friendCircleService.getAllFriendcircleNum(friendsCircleData);
		if (num == 0) {
			return new Model(500, "查询失败");
		}
		List<FriendsCircle> list = new ArrayList<FriendsCircle>();
		if (Integer.parseInt(friendsCircleData.getNewHot()) == 1) {
			list = friendCircleService.getAllFriendcircle(friendsCircleData);
			if (!ParaClick.clickList(list)) {
				return new Model(500, "查询失败");
			}
		} else {
			list = friendCircleService.getHotFriendcircle(friendsCircleData);
			if (!ParaClick.clickList(list)) {
				return new Model(500, "查询失败");
			}
		}
		for (FriendsCircle friendsCircle : list) {
			Hashtable<String, Object> map = new Hashtable<String, Object>();
			String[] pp=new String[]{};
			if(!ParaClick.clickString(friendsCircle.getPhoto())){
				pp = friendsCircle.getPhoto().split("\\|");
			}
//			for (int i = 0; i < pp.length; i++) {
//				boolean flag2 = friendCirclePhotoService.addFriendCirclePhoto(
//						pp[i], friendsCircleData, userEntityData);
//				if (!flag2) {
//					return new Model(500, "添加图片失败");
//				}
//			}
//			List<Object> list3 = new ArrayList<Object>();
			/*List<FriendsComment> list3 = friendCommentService
					.getByFriendsCircleId();
			if (!ParaClick.clickList(list3)) {
				return new Model(500, "查询失败");
			}*/
			UserEntity userEntity3 = userService.get(friendsCircle.getUserId());
			/*
			 * List<Object> list4 = new ArrayList<Object>(); for (int j = 0; j <
			 * list3.size(); j++) { Map<String, Object> map2 = new
			 * HashMap<String, Object>(); UserEntity userEntity2 =
			 * userService.get(list3.get(j) .getUserId()); map2.put("user2",
			 * userEntity2); map2.put("friendsComment2", list3); list4.add(map);
			 * }
			 */
			List<FriendsVeryOk> list6 = friendsVeryOkService
					.getUserFriendsCircleVeryOk(friendsCircle.getId(), userEntity);
			
			if (!ParaClick.clickList(list6)) {
				map.put("veryOk", 0);
			} else {
				map.put("veryOk", 1);
			}
			UserEntityReq userEntityReq=new UserEntityReq();
			userEntityReq.setHeadimgurl(userEntity3.getHeadimgurl());
			userEntityReq.setUsername(userEntity3.getUsername());
			userEntityReq.setUserId(userEntity3.getUserId());
			map.put("user", userEntityReq);
			friendsCircle.setReleaseDate(DateUtils.showTimeText(DateUtils.getDate(friendsCircle.getReleaseDate(),"yyyy-MM-dd HH:mm")));
			map.put("friendsCircle",friendsCircle);
			map.put("photo",pp);
			map.put("photosize",pp.length);
			list2.add(map);
		}

		model.setError(200);
		model.setNowpage(Integer.parseInt(friendsCircleData.getNowPage()));
		model.setTotalpage((num + 10 - 1) / 10);
		model.setObj(list2);
		return model;
	}

	/**
	 * pp
	 * 
	 * @Remarks app>個人中心>我的朋友圈
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.GET_MY_ALL_FRIENDSCIRCLE_INFO, method = RequestMethod.POST)
	public Model getMyPerfectInfoHeadPortrait(
			FriendsCircleData friendsCircleData, UserEntityData userEntityData)
			throws Exception {
		userEntityData.clickUser();
		UserEntity userEntity = userService.get(userEntityData.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		Model model = new Model();
		List<Object> list2 = new ArrayList<Object>();
		int num = friendCircleService
				.getMyAllFriendcircleNum(friendsCircleData,userEntity);
		if (num == 0) {
			return new Model(500, "查询失败");
		}
		List<FriendsCircle> list = new ArrayList<FriendsCircle>();
		list = friendCircleService.getMyAllFriendcircle(friendsCircleData,userEntity);
		if (!ParaClick.clickList(list)) {
			return new Model(500, "查询失败");
		}
		for (int i = 0; i < list.size(); i++) {
			Hashtable<String, Object> map = new Hashtable<String, Object>();
			/*List<FriendsComment> list3 = friendCommentService
					.getByFriendsCircleId();
			if (!ParaClick.clickList(list3)) {
				return new Model(500, "查询失败");
			}*/
			UserEntity userEntity3 = userService.get(list.get(i).getUserId());
			/*
			 * List<Object> list4 = new ArrayList<Object>(); for (int j = 0; j <
			 * list3.size(); j++) { Map<String, Object> map2 = new
			 * HashMap<String, Object>(); UserEntity userEntity2 =
			 * userService.get(list3.get(j) .getUserId()); map2.put("user2",
			 * userEntity2); map2.put("friendsComment2", list3); list4.add(map);
			 * }
			 */
			FriendsCirclePhoto friendsCirclePhoto=friendCirclePhotoService.getFriendCirclePhotoByUserAndFId(userEntity3,list.get(i).getId());
			if (friendsCirclePhoto==null) {
				map.put("friendsCirclePhoto", " ");
			}
			map.put("friendsCirclePhoto", friendsCirclePhoto);
			List<FriendsVeryOk> list6 = friendsVeryOkService
					.getUserFriendsCircleVeryOk(list.get(i).getId(), userEntity);
			if (!ParaClick.clickList(list6)) {
				map.put("veryOk", 0);
			} else {
				map.put("veryOk", 1);
			}
			UserEntityReq userEntityReq=new UserEntityReq();
			userEntityReq.setHeadimgurl(userEntity3.getHeadimgurl());
			userEntityReq.setUsername(userEntity3.getUsername());
			userEntityReq.setUserId(userEntity3.getUserId());
			map.put("user", userEntityReq);
			list.get(i).setReleaseInfo(DateUtils.showTimeText(DateUtils.getDate(list.get(i).getReleaseInfo(),"yyyy-MM-dd HH:mm")));
			map.put("friendsCircle", list.get(i));
			// map.put("friendsComment", list4);
			list2.add(map);
		}
		model.setError(200);
		model.setNowpage(Integer.parseInt(friendsCircleData.getNowPage()));
		model.setTotalpage((num + 10 - 1) / 10);
		model.setObj(list2);
		return model;
	}
	/**
	 * pp
	 * 
	 * @Remarks 朋友圈>查看评论> 根據id查詢朋友圈
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.GET_ALL_FRIENDSCIRCLE_INFO_BYID, method = RequestMethod.POST)
	public Model getAllCartoonCommentById(FriendsCircleData friendsCircleData) throws Exception {
		friendsCircleData.clickUser();
		UserEntity userEntity = userService
				.getUserInfoById(friendsCircleData.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		FriendsCircle friendsCircle = friendCircleService
				.get(friendsCircleData.getId());
		UserEntity userEntity2 = userService.get(friendsCircle.getUserId());
		Hashtable<String, Object> map = new Hashtable<String, Object>();
		List<FriendsVeryOk> list6 = friendsVeryOkService
				.getUserFriendsCircleVeryOk(friendsCircleData.getId(), userEntity);
		if (!ParaClick.clickList(list6)) {
			map.put("veryOk", 0);
		} else {
			map.put("veryOk", 1);
		}
		UserEntityReq userEntityReq=new UserEntityReq();
		userEntityReq.setHeadimgurl(userEntity2.getHeadimgurl());
		userEntityReq.setUsername(userEntity2.getUsername());
		userEntityReq.setUserId(userEntity2.getUserId());
		map.put("user", userEntityReq);
		friendsCircle.setReleaseInfo(DateUtils.showTimeText(DateUtils.getDate(friendsCircle.getReleaseInfo(),"yyyy-MM-dd HH:mm")));
		map.put("friendsCircle", friendsCircle);
		return new Model(200,map);
	}
	/**
	 * pp
	 * 
	 * @Remarks 朋友圈>穿token
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.UPLOD_TOKEN, method = RequestMethod.POST)
	public Model yplodToken(FriendsCircleData friendsCircleData) throws Exception {
	/*	friendsCircleData.clickUser();
		UserEntity userEntity = userService
				.getUserInfoById(friendsCircleData.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}*/
		UploadDemo uploadDemo=new UploadDemo();
		String pp=uploadDemo.getUpToken();
		
		return new Model(200,pp);
	}
}
