package com.qin.crxl.comic.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qin.crxl.comic.entity.Cartoon;
import com.qin.crxl.comic.entity.CartoonSet;
import com.qin.crxl.comic.entity.FollowCartoon;
import com.qin.crxl.comic.entity.HistoryRecord;
import com.qin.crxl.comic.entity.UserEntity;
import com.qin.crxl.comic.entity.vo.CartoonData;
import com.qin.crxl.comic.service.CartoonService;
import com.qin.crxl.comic.service.CartoonSetService;
import com.qin.crxl.comic.service.FollowCartoonService;
import com.qin.crxl.comic.service.HistoryRecordService;
import com.qin.crxl.comic.service.UserService;
import com.qin.crxl.comic.system.ActionUrl;
import com.qin.crxl.comic.tool.DateUtil;
import com.qin.crxl.comic.tool.Model;
import com.qin.crxl.comic.tool.ParaClick;

@Controller
public class FollowCartoonController {

	@Autowired
	private FollowCartoonService followCartoonService;
	@Autowired
	private UserService userService;
	@Autowired
	private CartoonService cartoonService;
	@Autowired
	private CartoonSetService cartoonSetService;
	@Autowired
	private HistoryRecordService historyRecordService;

	/**
	 * pp 关注
	 * 
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.FOLLOW_CARTOON, method = RequestMethod.POST)
	public Model getCartoonInfoById(CartoonData cartoonData) throws Exception {
		cartoonData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(cartoonData
				.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		if (ParaClick.clickString(cartoonData.getId())) {
			return new Model(500, "ID为空 ");
		}
		if(Integer.parseInt(cartoonData.getFollowState())==1){
			boolean flag = followCartoonService.deleteFollowCartoon(cartoonData,
					userEntity);
			if (!flag) {
				return new Model(500, "取消关注失败 ");
			}
		}else{
			boolean flag = followCartoonService.followCartoon(cartoonData,
					userEntity);
			if (!flag) {
				return new Model(500, "关注失败 ");
			}
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<FollowCartoon> followCartoon = followCartoonService.getFollowByid(
				cartoonData, userEntity);
		if (!ParaClick.clickList(followCartoon)) {
			map.put("followCartoon", 0);
		} else {
			map.put("followCartoon", 1);
		}
		return new Model(200, map);
	}

	/**
	 * pp app>書架 >取消關注
	 * 
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.CANCEL_FOLLOW_CARTOON, method = RequestMethod.POST)
	public Model deleteCartoonInfoById(CartoonData cartoonData)
			throws Exception {
		cartoonData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(cartoonData
				.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		if (!ParaClick.clickString(cartoonData.getId())) {
			return new Model(500, "ID为空 ");
		}
		boolean flag = followCartoonService.deleteFollowCartoon(cartoonData,
				userEntity);
		if (!flag) {
			return new Model(500, "取消关注失败 ");
		}
		Map<String, Object> map = new HashMap<String, Object>();
		List<FollowCartoon> followCartoon = followCartoonService.getFollowByid(
				cartoonData, userEntity);
		if (!ParaClick.clickList(followCartoon)) {
			map.put("followCartoon", 0);
		} else {
			map.put("followCartoon", 1);
		}
		return new Model(200, map);
	}

	/**
	 * pp app>書架 >我的書架
	 * 
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.GET_MY_FOLLOW_CARTOON, method = RequestMethod.POST)
	public Model getCartoonByBookshelf(CartoonData cartoonData)
			throws Exception {
		cartoonData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(cartoonData
				.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		Model model = new Model();
		int num = followCartoonService.getCartoonByBookshelfCount(cartoonData,
				userEntity);
		if (num == 0) {
			return new Model(500, "暫無收藏");
		}
		List<FollowCartoon> list = followCartoonService.getCartoonByBookshelf(
				cartoonData, userEntity);
		if (!ParaClick.clickList(list)) {
			return new Model(500, "暫無收藏");
		}
		model.setError(200);
		model.setNowpage(Integer.parseInt(cartoonData.getNowPage()));
		model.setTotalpage((num + 10 - 1) / 10);
		model.setObj(list);
		return model;
	}

	/**
	 * pp app>更新提醒
	 * 
	 * @throws Exception
	 * */
	@ResponseBody
	@RequestMapping(value = ActionUrl.GET_MY_FOLLOW_CARTOON_NEWS, method = RequestMethod.POST)
	public Model getCartoonByBookshelfNews(CartoonData cartoonData)
			throws Exception {
		cartoonData.clickUser();
		UserEntity userEntity = userService.getUserInfoById(cartoonData
				.getUserId());
		if (userEntity == null) {
			return new Model(404, "无用户");
		}
		// 今天时间
		String newTime = DateUtil.dateToTimeStamp(new Date());

		Model model = new Model();
		/*int num = followCartoonService.getCartoonByBookshelfCount(cartoonData,
				userEntity);
		if (num == 0) {
			return new Model(500, "暫無收藏");
		}*/
		List<FollowCartoon> list = followCartoonService.getCartoonByBookshelf(
				cartoonData, userEntity);
		if (!ParaClick.clickList(list)) {
			return new Model(500, "暫無收藏");
		}
		List<Object> list232=new ArrayList<Object>();
		for (int i = 0; i < list.size(); i++) {
			List<HistoryRecord> list2 = historyRecordService
					.getHistoryByCartoonId(list.get(i).getCartoonId(),
							userEntity);
			if (!ParaClick.clickList(list2)) {
				return new Model(500, "無關注");
			}
			if ((DateUtil.getdate_yyyy_MM_dd_00_00_00(list2.get(0)
					.getImplDate())).getTime() > (DateUtil
					.getdate_yyyy_MM_dd_00_00_00(newTime+" 00:00:00"))
					.getTime()) {
				return new Model(500, "已提示");
			}
			Cartoon cartoon=cartoonService.get(list.get(i).getCartoonId());
			if(cartoon==null){
				return new Model(500, "無漫畫");
			}
			List<CartoonSet> cartoonSET=cartoonSetService.getByCartoonIdforFollow(cartoon.getId());
			if(!ParaClick.clickList(cartoonSET)){
				return new Model(500, "無此話");
			}
			CartoonSet cartoonSET2=cartoonSetService.get(list2.get(0).getCartoonSetId());
			if(cartoonSET2==null){
				return new Model(500, "無此話");
			}
			if(cartoonSET.get(0).getSort()>cartoonSET2.getSort()){
				list232.add(cartoon);
			}
		}
		model.setError(200);
		model.setNowpage(list232.size());
		model.setTotalpage((list232.size() + 3 - 1) / 3);
		model.setObj(list232);
		return model;
	}
}
