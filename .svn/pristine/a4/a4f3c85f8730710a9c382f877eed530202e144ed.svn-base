package com.qin.crxl.comic.action;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.qin.crxl.comic.entity.FriendsCirclePhoto;
import com.qin.crxl.comic.entity.vo.FriendsCircleData;
import com.qin.crxl.comic.service.AdminFriendsCirclePhotoService;
import com.qin.crxl.comic.service.AdminFriendsCircleService;
import com.qin.crxl.comic.system.ActionUrl;
import com.qin.crxl.comic.tool.DateUtil;
import com.qin.crxl.comic.tool.Model;
import com.qin.crxl.comic.tool.ParaClick;
import com.qin.crxl.comic.tool.StringToInt;

@Controller
public class AdminFriendsCircleController {
	
	@Autowired
	private AdminFriendsCircleService adminFriendCricleService;
	@Autowired
	private AdminFriendsCirclePhotoService adminFriendsCircleServicePhoto;
	
	@ResponseBody
	@RequestMapping(value = ActionUrl.SELECT_ALL_FRIENDSCIRCLE_INFO, method = RequestMethod.POST)
	public Model getUserPerfectInfoHeadPortrait(
			FriendsCircleData friendsCircleData) throws Exception {
		if (!ParaClick.clickString(friendsCircleData.getStarTime())
				&& !ParaClick.clickString(friendsCircleData.getEndTime())) {
			Long start = 0L;
			Long end = 0L;
			// 开始时间
			start = DateUtil.getdate_yyyy_MM_dd_00_00_00(
					friendsCircleData.getStarTime() + " 00:00:00")
					.getTime();
			// 结束时间
			end = DateUtil.getdate_yyyy_MM_dd_00_00_00(
					friendsCircleData.getEndTime() + " 23:59:59").getTime();
			if (start > end) {
				return new Model(500, "开始时间不能大于结束时间");
			}
		}
		if(ParaClick.clickString(friendsCircleData.getNowPage())){
			friendsCircleData.setNowPage("1");
		}
		if(ParaClick.clickString(friendsCircleData.getPageNum())){
			friendsCircleData.setPageNum("10");
		}

		Model model = new Model();
		
		List<Object[]> list = adminFriendCricleService.getAllFriendcircle(friendsCircleData);
		if (!ParaClick.clickList(list)) {
			return new Model(500, "查询失败");
		}
		for(int i=0;i<list.size();i++){
			try {
				List<FriendsCirclePhoto> friendsCirclePhotoList = adminFriendsCircleServicePhoto.selectFriendsCirclePhoto((String)list.get(i)[0]);
				list.get(i)[7]=friendsCirclePhotoList.size();
				list.get(i)[2]=StringToInt.toString((String)list.get(i)[2]);
			} catch (Exception e) {
				list.get(i)[2]="潮人用户";
			}
		}
		int num=0;
		num = adminFriendCricleService.getAllFriendcircleNum(friendsCircleData);
		if (num == 0) {
			return new Model(500, "查询失败");
		}
		model.setError(200);
		model.setNowpage(Integer.parseInt(friendsCircleData.getNowPage()));
		model.setTotalpage((num + Integer.parseInt(friendsCircleData.getPageNum().trim()) - 1) / Integer.parseInt(friendsCircleData.getPageNum().trim()));
		model.setObj(list);
		model.setTotalNum(num);
		return model;
	}
	@ResponseBody
	@RequestMapping(value = ActionUrl.UPDATE_ALL_FRIENDSCIRCLE_STATE, method = RequestMethod.POST)
	public Model updateState(FriendsCircleData friendsCircleData){
		if(ParaClick.clickString(friendsCircleData.getId())){
			return new Model(500,"混圈评论id为空");
		}
		if(ParaClick.clickString(friendsCircleData.getDeleteState())){
			return new Model(500,"混圈评论状态为空");
		}
		boolean bool = adminFriendCricleService.updateFriendcircleState(friendsCircleData);
		if(bool){
			return new Model(200,"修改成功");
		}
		return new Model(500,"修改失败");
	}
}
