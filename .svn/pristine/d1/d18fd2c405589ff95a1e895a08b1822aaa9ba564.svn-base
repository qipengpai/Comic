package com.qin.crxl.comic.service.impl;

import java.util.List;

import org.hibernate.HibernateException;
import org.springframework.stereotype.Service;

import com.qin.crxl.comic.base.BaseServiceImpl;
import com.qin.crxl.comic.entity.UserOrder;
import com.qin.crxl.comic.entity.vo.UserOrderData;
import com.qin.crxl.comic.service.AdminUserOrderService;
import com.qin.crxl.comic.tool.ParaClick;

@Service
public class AdminUserOrdeServiceImpl extends BaseServiceImpl<UserOrder>
		implements AdminUserOrderService {

	@SuppressWarnings("unchecked")
	@Override
	public List<Object[]> selectUserOrder(UserOrderData userOrderData) {
		// 多表模糊查询
		StringBuffer sb = new StringBuffer();

		sb.append("select o.id,o.orderNum,o.orderUserId,o.orderMoney,o.orderRemarks,o.orderIntegral,o.orderDescription,o.orderDate from UserOrder o where o.orderState=1");
		if (!ParaClick.clickString(userOrderData.getCondition())) {
			sb.append(" and ((o.orderNum like '%" + userOrderData.getCondition()
					+ "%') or (o.orderDescription like '%"
					+ userOrderData.getCondition() + "%'))");
		}
		if (!ParaClick.clickString(userOrderData.getStarTime())
				&& !ParaClick.clickString(userOrderData.getEndTime())) {
			sb.append(" and o.orderDate BETWEEN '"
					+ userOrderData.getStarTime() + " 00:00:00' and '"
					+ userOrderData.getEndTime() + " 23:59:59'");
		}

		sb.append(" order by o.orderDate DESC limit "
				+ (Integer.parseInt(userOrderData.getNowPage()) - 1)
				* Integer.parseInt(userOrderData.getPageNum()) + ","
				+ Integer.parseInt(userOrderData.getPageNum()));
		System.out.println(sb.toString());
		List<Object[]> list = null;
		try {
			list = getSessionFactory().createSQLQuery(sb.toString()).list();
			return list;
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public int getCountUserOrder(UserOrderData userOrderData) {
		StringBuffer sb = new StringBuffer();
		sb.append("select count(*) from UserOrder o,UserEntity u where o.orderUserId=u.userId and o.orderState=1");
		if (!ParaClick.clickString(userOrderData.getCondition())) {
			sb.append(" and ((o.orderNum like '%" + userOrderData.getCondition()
					+ "%') or (o.orderDescription like '%"
					+ userOrderData.getCondition() + "%'))");
		}
		if (!ParaClick.clickString(userOrderData.getStarTime())
				&& !ParaClick.clickString(userOrderData.getEndTime())) {
			sb.append(" and o.orderDate BETWEEN '"
					+ userOrderData.getStarTime() + " 00:00:00' and '"
					+ userOrderData.getEndTime() + " 23:59:59'");
		}
		try {
			int gettotalpage = super.gettotalpage(sb.toString());
			return gettotalpage;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public UserOrder selectUserOrderById(UserOrderData userOrderData) {
		UserOrder userOrder = null;
		try {
			userOrder = super.get(userOrderData.getId());
			return userOrder;
		} catch (Exception e) {
			// TODO: handle exception
		}
		return null;
	}

	@Override
	public double moneyWater(UserOrderData userOrderData) {
		// 多表模糊查询
		StringBuffer sb = new StringBuffer();

		sb.append("select SUM(orderMoney) from UserOrder o,UserEntity u where o.orderUserId=u.userId and o.orderState=1");
		if (!ParaClick.clickString(userOrderData.getCondition())) {
			sb.append(" and ((o.orderNum like '%" + userOrderData.getCondition()
					+ "%') or (o.orderDescription like '%"
					+ userOrderData.getCondition() + "%'))");
		}
		if (!ParaClick.clickString(userOrderData.getStarTime())
				&& !ParaClick.clickString(userOrderData.getEndTime())) {
			sb.append(" and o.orderDate BETWEEN '"
					+ userOrderData.getStarTime() + " 00:00:00' and '"
					+ userOrderData.getEndTime() + " 23:59:59'");
		}
		System.out.println(sb.toString());
		try {
			Double sum = super.getSUM(sb.toString());
			return sum;
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
		}
		return 0.0;
	}

	@Override
	public double moneyUserEntity(String userId) {
		return super.getSUM("select SUM(orderMoney) from UserOrder where orderUserId='"+userId+"'");
	}

	@Override
	public List<Object[]> selectCartoonOrderProfit(String starTime,
			String endTime) {
		// 各公众号收益
		StringBuffer sb = new StringBuffer();
		sb.append("select u.PlatformIndex,sum(o.orderMoney) as a from UserEntity u,UserOrder o  where u.userId=o.userId and o.orderState=1  ");
		if (!ParaClick.clickString(starTime)
				&& !ParaClick.clickString(endTime)) {
			sb.append("  and  o.orderDate>='" + starTime + " 00:00:00"
					+ "'  and  o.orderDate<='" + endTime + " 23:59:59'");
		}
		sb.append(" GROUP BY u.PlatformIndex");
		List<Object[]> list=null;
		try {
			list = getSessionFactory().createSQLQuery(sb.toString()).list();
		} catch (HibernateException e) {
			// TODO Auto-generated catch block
		}
		return list;
	}



}
