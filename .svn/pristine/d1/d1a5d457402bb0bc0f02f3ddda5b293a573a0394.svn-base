package com.qin.crxl.comic.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.qin.crxl.comic.base.BaseServiceImpl;
import com.qin.crxl.comic.entity.Cartoon;
import com.qin.crxl.comic.entity.CartoonComment;
import com.qin.crxl.comic.entity.UserEntity;
import com.qin.crxl.comic.entity.vo.CartoonCommentData;
import com.qin.crxl.comic.exception.BusinessException;
import com.qin.crxl.comic.service.CartoonCommentService;
import com.qin.crxl.comic.service.CartoonService;
import com.qin.crxl.comic.tool.DateUtil;
import com.qin.crxl.comic.tool.Emoji;

@Service
public class CartoonCommentServiceImpl extends BaseServiceImpl<CartoonComment>
		implements CartoonCommentService {


	/*@Autowired
	private CartoonService cartoonService;
*/

	@Override
	public int getCartoonCommentCount(Cartoon cartoon) {
		// 查看漫画评论人数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonComment WHERE cartoonId='"
						+ cartoon.getId() + "'");
		return num;
	}

	@Override
	public List<CartoonComment> getALLCartoonComment(
			CartoonCommentData cartoonCommentData) {
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT  * FROM  CartoonComment  WHERE  1=1 AND cartoonId='"
				+ cartoonCommentData.getCartoonId()
				+ "' AND deleteCartoonComment=1 ");
		if (Integer.parseInt(cartoonCommentData.getBestNew())==1) {
			sb.append(" ORDER BY commentDate DESC ");
		}else{
			sb.append("  ORDER BY okCount DESC,commentDate ASC ");
		}
		sb.append(" LIMIT " + (Integer.parseInt(cartoonCommentData.getNowPage())-1)*10 + ",10");
		List<CartoonComment> list = super.SQL(sb.toString(),
				CartoonComment.class);
		return list;
	}

	@Override
	public int getAllCartoonCommentCount(CartoonCommentData cartoonCommentData) {
		// 查看漫画评论人数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonComment WHERE cartoonId='"
						+ cartoonCommentData.getCartoonId() + "' AND deleteCartoonComment=1");
		return num;
	}

	@Override
	public int getCartoonComment2Count(CartoonCommentData cartoonCommentData) {
		// 查看漫画评论的评论数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonComment WHERE commentId='"
						+ cartoonCommentData.getId() + "' AND deleteCartoonComment=1 ");
		return num;
	}

	@Override
	public boolean addCartoonComment(CartoonCommentData cartoonCommentData,
			UserEntity userEntity) throws Exception {
		// 评论该剧
		boolean flag = false;
		try {
			//int num = getAllCartoonCommentCount(cartoonCommentData);
			CartoonComment cartoonComment = new CartoonComment();
			cartoonComment.setCartoonId(cartoonCommentData.getCartoonId());
			//cartoonComment.setCommentInfo(Emoji.emojiConvert1(Emoji.filterEmoji(cartoonCommentData.getCommentInfo())));
			cartoonComment.setCommentInfo(cartoonCommentData.getCommentInfo());
			cartoonComment.setCommentId("0");
			cartoonComment.setCommentDate(DateUtil.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonComment.setImplDate(DateUtil.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonComment.setUserId(userEntity.getUserId());
			cartoonComment.setAite("0");
			cartoonComment.setOkCount(0);
			cartoonComment.setSort(1);
			cartoonComment.setCommentCount(0);
			cartoonComment.setDeleteCartoonComment(1);
			save(cartoonComment);
		/*	boolean flag2= cartoonService.addCommentCount(cartoonCommentData.getCartoonId());
			if(!flag2){
				throw new BusinessException("评论异常");
			}*/
			flag = true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		super.SQL("UPDATE Cartoon SET commentCount=(commentCount+1) WHERE id='"+cartoonCommentData.getCartoonId()+"'");
		return flag;
	}

	@Override
	public boolean addCartoonCommentSetConmment(
			CartoonCommentData cartoonCommentData, UserEntity userEntity) {
		// 评论该评论
		boolean flag = false;
		try {
			int num = getAllCartoonCommentCountByComment(cartoonCommentData);
			CartoonComment cartoonComment = new CartoonComment();
			cartoonComment.setCartoonId("0");
			cartoonComment.setCommentInfo(cartoonCommentData.getCommentInfo());
			cartoonComment.setCommentId(cartoonCommentData.getId());
			cartoonComment.setCommentDate(DateUtil.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonComment.setImplDate(DateUtil.getdate_yyyy_MM_dd_HH_MM_SS());
			cartoonComment.setUserId(userEntity.getUserId());
			cartoonComment.setAite("0");
			cartoonComment.setOkCount(0);
			cartoonComment.setSort(num + 1);
			cartoonComment.setDeleteCartoonComment(1);
			save(cartoonComment);
			boolean flag2 = addCartoonCommentSetConmmentCount(cartoonCommentData);
			if(!flag2){
				throw new BusinessException("异常");
			}
			flag = true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	private int getAllCartoonCommentCountByComment(
			CartoonCommentData cartoonCommentData) {
		// 查看漫画评论人数
		int num = super
				.gettotalpage("SELECT COUNT(*) FROM  CartoonComment WHERE commentId='"
						+ cartoonCommentData.getCommentId() + "'");
		return num;
	}



	@Override
	public List<CartoonComment> getALLCartoonCommentByCommentId(
			CartoonCommentData cartoonCommentData) {
		// TODO Auto-generated method stub
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT  * FROM  CartoonComment  WHERE  1=1 AND commentId='"
				+ cartoonCommentData.getId()
				+ "' ORDER BY commentDate DESC ");
		List<CartoonComment> list = super.SQL(sb.toString(),
				CartoonComment.class);
		return list;
	}

	@Override
	public List<CartoonComment> getCartoonCommentTwo(
			String id) {
		// 查询没条评论的前两条评论
		StringBuffer sb = new StringBuffer();
		sb.append("SELECT  * FROM  CartoonComment  WHERE  1=1 AND deleteCartoonComment=1 AND commentId='"
				+ id
				+ "' ORDER BY commentDate ASC LIMIT 0,2");
		List<CartoonComment> list = super.SQL(sb.toString(),
				CartoonComment.class);
		return list;
	}

	//@Override
	public boolean addCartoonCommentSetConmmentCount(
			CartoonCommentData cartoonCommentData) {
		// 增加评论的评论次数
		boolean flag=false;
		try {
			CartoonComment cartoonComment=super.get(cartoonCommentData.getId());
			if (cartoonComment==null) {
				return flag;
			}
			cartoonComment.setCommentCount(cartoonComment.getCommentCount()+1);
			flag=true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	@Override
	public boolean addOkCount(CartoonCommentData cartoonCommentData) {
		// 增加評論的點贊數
		boolean flag=false;
		try {
			CartoonComment cartoonComment=super.get(cartoonCommentData.getId());
			if (cartoonComment==null) {
				return flag;
			}
			cartoonComment.setOkCount(cartoonComment.getOkCount()+1);
			flag= true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		return flag;
	}

	@Override
	public boolean subductionOkCount(CartoonCommentData cartoonCommentData) {
		//	减少点赞数
		boolean flag=false;
		try {
			CartoonComment cartoonComment=super.get(cartoonCommentData.getId());
			if (cartoonComment==null) {
				return flag;
			}
			cartoonComment.setOkCount(cartoonComment.getOkCount()-1);
			flag= true;
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return flag;
		}
		return flag;
	}



}
